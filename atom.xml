<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[/sbin/blog]]></title>
  <link href="http://stephenbinns.github.com/atom.xml" rel="self"/>
  <link href="http://stephenbinns.github.com/"/>
  <updated>2013-03-03T15:40:49+00:00</updated>
  <id>http://stephenbinns.github.com/</id>
  <author>
    <name><![CDATA[Stephen Binns]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[A better javascript console]]></title>
    <link href="http://stephenbinns.github.com/blog/2013/03/03/a-better-javascript-console/"/>
    <updated>2013-03-03T15:37:00+00:00</updated>
    <id>http://stephenbinns.github.com/blog/2013/03/03/a-better-javascript-console</id>
    <content type="html"><![CDATA[<p>window.console is available on most browsers however the entire set of functions aren&#8217;t always implemented. We have a choice, either we limit ourselves to logging in a single way or try and account for browser shortcomings.</p>

<p>We can make use of some useful javascript techniques to ensure that we can always call the methods we expect.</p>

<p>Its worth noting there are browsers which do not have a console logger, this is no problem to deal with:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>window.console = window.console || false;</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re using a trick here, because window.console will always return a truthy value when the console property exists the value will always be false if it is not.</p>

<p>We can take this a stage further if we feel like and set up a log method instead of returning false</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>window.console = window.console || { log: function() { /* Do nothing */ } };</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Great, so we can always be sure calling window.console.log is safe. Now lets look at wrapping the other methods.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var levels = ['debug','info','warn','error','fatal'];
</span><span class='line'>
</span><span class='line'>for (var i in levels) {
</span><span class='line'>  var level = levels[i];
</span><span class='line'>  window.console[level] = window.console[level] || window.console.log;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;re using an alternative method to ensure that a functions exists for each of the levels specified, we use the square bracket syntax to check the presence of the function. We&#8217;re using the same trick again to ensure that there is always a function attached to all the levels we&#8217;d wish to log at.</p>

<p>You can view the full gist at <a href="https://gist.github.com/stephenbinns/5076500">here</a></p>
]]></content>
  </entry>
  
</feed>
